build:
    box: google/golang
    steps:
      # Sets the go workspace and places you package
      # at the right place in the workspace tree
      - setup-go-workspace

      - script:
          name: setup env
          code: |
            export GOROOT=/usr/local/go
            export GOPATH=$(pwd)
            go env

      # Gets the dependencies
      - script:
          name: go get
          code: |
              go get github.com/vend/oauth2_proxy

      ## Test the project
      #- script:
      #    name: go test
      #    code: go test ./..

      # Statically build the project
      - script:
          name: go build
          code: CGO_ENABLED=0 go build -a -ldflags '-s' -installsuffix cgo -o app .

      # Copy artifacts to a location that gets passed along to the deploy pipeline
      - script:
          name: copy artifacts
          code: cp -R ./etc oauth2_proxy "$WERCKER_OUTPUT_DIR"

deploy:
    box: google/golang
    steps:
      # Move artifacts to expected dir structure
      - script:
          name: move artifacts
          code: mkdir -p opt/oauth2_proxy && mv ./etc oauth2_proxy opt/oauth2_proxy/

      # Push images
      # Use the scratch step to build a container from scratch based on the files present
      - internal/docker-scratch-push:
          username: $QUAY_USERNAME
          password: $QUAY_PASSWORD
          entrypoint: $WERCKER_OUTPUT_DIR/opt/oauth2_proxy/oauth2_proxy
          cmd: --config=$WERCKER_OUTPUT_DIR/etc/oauth2_proxy.cfg
          tag: $SCRATCH_TAG
          ports: "4180"
          repository: quay.io/vend/oauth2_proxy
          registry: https://quay.io